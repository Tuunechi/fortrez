// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Admin {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String         @unique
  password     String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  refreshToken RefreshToken[]
  project      Project[]
  mediaFiles   MediaFiles[]
  Blog         Blog[]
}

model Project {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  title        String        @unique
  description  String
  problem      String
  solutions    String[]
  transactions Transaction[]
  donors       Int
  funded       Int
  pending      Int
  target       Int
  completed    Boolean
  category     String
  type         String
  authorId     String        @db.ObjectId
  author       Admin         @relation(fields: [authorId], references: [id])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // MediaFiles
  mediaFiles MediaFiles[]
}

model Blog {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  title       String       @unique
  description String
  tags        String
  category    String
  authorId    String       @db.ObjectId
  author      Admin        @relation(fields: [authorId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  mediaFiles  MediaFiles[]
}

model MediaFiles {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  url              String
  providerPublicId String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  adminId String @db.ObjectId
  admin   Admin  @relation(fields: [adminId], references: [id])

  projectId String? @db.ObjectId
  blogId    String? @db.ObjectId

  project Project? @relation(fields: [projectId], references: [id])
  blog    Blog?    @relation(fields: [blogId], references: [id])
}

model Transaction {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String?
  donor     String
  comment   String?
  amount    Int
  currency  String
  verified  Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String   @db.ObjectId
}

model RefreshToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  adminId String @db.ObjectId
  admin   Admin  @relation(fields: [adminId], references: [id])
}
